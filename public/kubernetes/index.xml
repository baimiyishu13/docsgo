<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kubernetes on docsGo</title>
    <link>http://localhost:1313/docsgo/kubernetes/</link>
    <description>Recent content in Kubernetes on docsGo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 26 Apr 2024 22:44:23 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/docsgo/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>第1章 Kubernetes核心概念</title>
      <link>http://localhost:1313/docsgo/kubernetes/study/%E7%AC%AC1%E7%AB%A0-kubernetes%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Fri, 26 Apr 2024 22:44:23 +0800</pubDate>
      <guid>http://localhost:1313/docsgo/kubernetes/study/%E7%AC%AC1%E7%AB%A0-kubernetes%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</guid>
      <description>重新学习Kubernetes ，弥补遗漏知识。&#xA;常用组件：Pod、service、ingress、configmap、secret、volume、deployment、statefulset、daemonset&#xA;容器编排 容器编排工具的任务？&#xA;从时间顺序上该问题：&#xA;微服务的兴起导致了容器技术使用的增加，容器技术提供了一个完美的主机 在都个主机环境使用脚本或者自制的工具管理会非常麻烦，这种情况下出现了对容器编排的需求。 所以kubernetes 所做的就是&#xA;高可用性：高可用意味着：程序没有停机时间，总是可以让用户访问 扩展性：快速扩展程序 【动态调整负载】 灾难恢复，基础设施出现问题、数据丢失、服务器崩溃等，应用程序不会丢失任何数据。 核心组件 每个节点&#xA;container runtime kubelet kube-proxy：service本身就是LB，捕捉请求指向应用程序 master：&#xA;api server Pod Pod：抽象概念，Pod的作用基本是就是创建容器运行的环境。或在容器上面的一个层。&#xA;Pod之间通信：&#xA;k8s 的CNI 提供了 虚拟网络，每个Pod都会有一个IP。 这个IP是会变化的。【容器奔溃重启等等原因】会分配一个新的IP。 Service service：一个静态的IP或永久的地址，可以连接到每个通过标签匹配到的Pod。&#xA;好处：service 和 Pod的生命周期不相互连接。【即使Pod死亡，Service 和 它的IP也会保持不变】&#xA;显然接下来希望应用程序通过外部访问&#xA;Ingress 代替 NodePort&#xA;Volume 外部配置：configmap&#xA;加密配置：secret，使用base64，实际上并不能加密，所以会使用第三方工具。&#xA;如果希望数据或日志数据可靠的存储下来，可以做啊都这件事的组件：Volume&#xA;存储：可以是节点磁盘，也可以是远程存储 。&#xA;工作负载 deployment&#xA;statefulset：部署数据库、有状态服务&#xA;使用有状态部署数据库在k8s集群，会有性能等问题，所以使用集群外托管数据库是一种常见的做法。 demonset：每个节点部署一个Pod，负责代理、日志收集、守护进程等。</description>
    </item>
    <item>
      <title>0.认识Kubernetes</title>
      <link>http://localhost:1313/docsgo/kubernetes/study/0-%E8%AE%A4%E8%AF%86kubernetes/</link>
      <pubDate>Fri, 19 Apr 2024 14:12:12 +0800</pubDate>
      <guid>http://localhost:1313/docsgo/kubernetes/study/0-%E8%AE%A4%E8%AF%86kubernetes/</guid>
      <description>Docker 可以使用 docker run 运行简单的应用程序的单个实例，用户数量请求增大时，需要去启动更多的实例。&#xA;需要密切关注应用程序 负载和性能 不仅仅是这些，还有：&#xA;容器故障恢复 主机崩溃等 容器编排是一种解决方案，帮助在生产环节中托管容器</description>
    </item>
    <item>
      <title>Nginx Ingress重定向</title>
      <link>http://localhost:1313/docsgo/kubernetes/ingress/nginx-ingress%E9%87%8D%E5%AE%9A%E5%90%91/</link>
      <pubDate>Mon, 08 Apr 2024 10:46:46 +0800</pubDate>
      <guid>http://localhost:1313/docsgo/kubernetes/ingress/nginx-ingress%E9%87%8D%E5%AE%9A%E5%90%91/</guid>
      <description>官网参考：https://kubernetes.github.io/ingress-nginx/examples/rewrite/&#xA;metadata: annotations: nginx.ingress.kubernetes.io/app-root: /pumer/project/** 测试访问：&#xA;[root@k8sworker1 ~]# curl portal.**.com &amp;lt;html&amp;gt; &amp;lt;head&amp;gt;&amp;lt;title&amp;gt;302 Found&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt; &amp;lt;body bgcolor=&amp;#34;white&amp;#34;&amp;gt; &amp;lt;center&amp;gt;&amp;lt;h1&amp;gt;302 Found&amp;lt;/h1&amp;gt;&amp;lt;/center&amp;gt; &amp;lt;hr&amp;gt;&amp;lt;center&amp;gt;nginx/1.13.9&amp;lt;/center&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; </description>
    </item>
    <item>
      <title>Kubeadm部署k8s集群</title>
      <link>http://localhost:1313/docsgo/kubernetes/kubeadm%E5%AE%89%E8%A3%85%E9%9B%86%E7%BE%A4/</link>
      <pubDate>Mon, 01 Apr 2024 11:18:20 +0800</pubDate>
      <guid>http://localhost:1313/docsgo/kubernetes/kubeadm%E5%AE%89%E8%A3%85%E9%9B%86%E7%BE%A4/</guid>
      <description>Kubernetes 注：部署环境为离线环境，镜像包需要推送到自建 Harbor 仓库。&#xA;在线环境部署 与 该文章最大区别就是无需手动准备镜像，仅此而已。&#xA;准备工作 1、Harbor 部署 harbor-offline-installer-v2.1.2.tgz&#xA;https://github.com/goharbor/harbor/releases/tag/v2.1.2&#xA;可参考安装文档：官方：https://goharbor.io/docs/2.1.0/install-config/quick-install-script/&#xA;上传harbor包，与 docker-compose-Linux-x86_64&#xA;mv /tmp/docker-compose-Linux-x86_64 /usr/local/bin/docker-compose chmod +x /usr/local/bin/docker-compose ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose 编辑配置文件&#xA;tar -zxvf /tmp/harbor-offline-installer-v2.1.2.tgz -C /root 进入解压的 harbor 目录&#xA;⚠️：拷贝harbor.yml的备份文件为 harbor.yml&#xA;编辑文件 /root/harbor/harbor.yml 注释掉https的相关配置 默认端口：8080 主机地址：hostname: 修改为主机 IP 存储目录: data_volume: /data/harbor 运行脚本：&#xA;bash install.sh 创建Harbor 库 bash create_project_harbor.sh&#xA;⚠️：按需添加需要的库名称，运行该脚本&#xA;#!/usr/bin/env bash url=&amp;#34;https://dockerhub.kubekey.local&amp;#34; user=&amp;#34;admin&amp;#34; passwd=&amp;#34;Harbor12345&amp;#34; harbor_projects=(library kubesphere calico ) for project in &amp;#34;${harbor_projects[@]}&amp;#34;; do echo &amp;#34;creating $project&amp;#34; curl -u &amp;#34;${user}:${passwd}&amp;#34; -X POST -H &amp;#34;Content-Type: application/json&amp;#34; &amp;#34;${url}/api/v2.</description>
    </item>
  </channel>
</rss>
