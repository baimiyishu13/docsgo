<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on docsGo</title>
    <link>http://localhost:1313/docsgo/cicd/</link>
    <description>Recent content in Home on docsGo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 25 Apr 2024 10:35:41 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/docsgo/cicd/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>第 7 章: 部署微服务应用程序（Mono 和 Polyrepo）</title>
      <link>http://localhost:1313/docsgo/cicd/gitlab/07-%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Thu, 25 Apr 2024 10:35:41 +0800</pubDate>
      <guid>http://localhost:1313/docsgo/cicd/gitlab/07-%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/</guid>
      <description>为微服务配置管道。&#xA;生产环境：很多 CICD 管道都是微服务相关 多微服务-单存储库：常见方法，使用文件夹&#xA;多微服务-多存储库 - group 组&#xA;共享的 runner、变量 每个存储库都有自己的 cicd 实验：&#xA;多微服务-单存储库 应用：3个服务【ui、shopping-cart 、products】&#xA;项目：https://gitlab.com/baimiyishu13/mymicroservice-cicd&#xA;在CICD设置中启用 runner 【当Runner被锁定时，不能将其分配给其他项目 勾选为空时 可共享操作】\&#xA;关键配置：&#xA;build_frontend: extends: .build variables: MICRO_SERVICE: frontend SERVICE_VERSION: &amp;#34;1.3&amp;#34; only: changes: - &amp;#34;frontend/**/*&amp;#34; 解读：只有当frontend 目录下文件改变时，才会触发流水线&#xA;/**/* 会匹配 frontend 目录及其所有子目录下的所有文件。 如果仅修改了frontend 目录下的文件，即，只变更frontend 微服务&#xA;--- workflow: rules: - if: $CI_COMMIT_BRANCH != &amp;#34;main&amp;#34; &amp;amp;&amp;amp; $CI_PIPELINE_SOURCE != &amp;#34;merge_request_event&amp;#34; when: never - when: always variables: GIT_DEPTH: 0 DEPLOYMENT_SERVER_HOST: &amp;#34;1.15.176.240&amp;#34; APP_ENDPOINT: http://$DEPLOYMENT_SERVER_HOST:3001 stages: - build - deploy .</description>
    </item>
    <item>
      <title>第6章：高级管道：版本控制、缓存、多阶段……</title>
      <link>http://localhost:1313/docsgo/cicd/gitlab/06-%E9%AB%98%E7%BA%A7%E7%AE%A1%E9%81%93/</link>
      <pubDate>Wed, 24 Apr 2024 14:30:19 +0800</pubDate>
      <guid>http://localhost:1313/docsgo/cicd/gitlab/06-%E9%AB%98%E7%BA%A7%E7%AE%A1%E9%81%93/</guid>
      <description>版本控制 当前我们构建的文件中，镜像版本&#xA;variables: GIT_DEPTH: 0 IMAGE_NAME: $CI_REGISTRY_IMAGE IMAGE_TAG: &amp;#34;1.2&amp;#34; APP_PORT: 3001 如果不增加修改，将会一直是1.2，这样做不现实因为会产生覆盖。&#xA;生产环境中，每次管道构建都会产生一个新的版本&#xA;随着程序改进，我们依然希望保留跟踪版本直接的变化 设置递增版本过程 版本 1.1.1&#xA;第一个数字： 程序重大改动，重构，替换编码框架 第二个数字：次要更改，新功能，大的bug修复 第三个数字：补丁版本，小的修改，例如较小的bug修复 在 CI 文件中读取程序的 版本&#xA;服务器安装 jq 命令 [root@monitor ~]# cat p.json | jq -r &amp;#39;.version&amp;#39; 1.0.0 build_image: stage: build tags: - ec2 - aws - shell before_script: - export APP_VERSION=$(cat app/package.json | jq -r &amp;#39;.version&amp;#39;) script: - docker build -t $IMAGE_NAME:$APP_VERSION . 即使这样，还需每次修改应用程序中的 version&#xA;在构建镜像是 为 Image 添加 TAG 【预定义变量】</description>
    </item>
    <item>
      <title>第5章：生产环境中的管道</title>
      <link>http://localhost:1313/docsgo/cicd/gitlab/05-%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%AD%E7%9A%84%E7%AE%A1%E9%81%93/</link>
      <pubDate>Tue, 23 Apr 2024 15:42:55 +0800</pubDate>
      <guid>http://localhost:1313/docsgo/cicd/gitlab/05-%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%AD%E7%9A%84%E7%AE%A1%E9%81%93/</guid>
      <description>将构建打包应用程序，构建镜像打包部署到环境&#xA;使用项目：https://gitlab.com/baimiyishu13/mynodeapp-cicd-project，构建一个完整的 cicd 管道&#xA;具体有以下步骤：&#xA;单元测试 STAT 应用程序安全测试，扫描代码安全 docker build docker push Registry deploy -DEV deploy -test deploy-生产 第一步：单元测试 --- workflow: rules: - if: $CI_COMMIT_BRANCH != &amp;#34;main&amp;#34; &amp;amp;&amp;amp; $CI_PIPELINE_SOURCE != &amp;#34;merge_request_event&amp;#34; when: never - when: always run_unit_test: image: node:21-alpine tags: - ec2 - aws - docker before_script: - cd app - npm install script: - npm test artifacts: when: always paths: - app/junit.xml reports: junit: app/junit.xml 解释：&#xA;artifacts 关键字用于指定在 job 运行后需要保存的文件或目录 path: app/junit.</description>
    </item>
    <item>
      <title>第4章：GitLab架构: Runners, 执行器</title>
      <link>http://localhost:1313/docsgo/cicd/gitlab/04-gitlab-%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Mon, 22 Apr 2024 16:47:48 +0800</pubDate>
      <guid>http://localhost:1313/docsgo/cicd/gitlab/04-gitlab-%E6%9E%B6%E6%9E%84/</guid>
      <description>GItLab 架构 触发的管道&#xA;问题：gitlab 在哪里执行这些操作，就想执行的echo、ls、创建文件等等，实际上发生在哪里。&#xA;必须在某个服务器或者环境中运行&#xA;gitlab.com 本身托管的gitlab 实例 gitlab runner：安装在单独服务器，而不是运行在gitlab 服务器上，连接到gitlab服务器就可以执行gitlab服务器发给它的job。所谓的运行器【可供所有用户使用】 执行器 选择那种类型的执行器：&#xA;每个都有自己的用例&#xA;一般使用linux 构建标准的 ci cd 管道 docker 执行器 kubernetes 集群中执行 定义和配置 gitlab runner 执行器&#xA;可以在一台服务器运行多个执行器&#xA;Shell 执行器 gitlab runner 实际上就是一个中介，它将从 gitlab 获取到的作业命令移交给它正在运行的服务器的 shell，实际上是在 gitlab runner 运行的服务器。&#xA;执行作业的服务器，通常也称为：shell 执行器&#xA;意味着需要使用命令：&#xA;docker go npm maven 等等，都需要安装这些工具，升级版本等等。意味着需要管理员大量的操作&#xA;Docker 执行器 可以随意安装服务、工具，不必在服务端配置其他。&#xA;每个job 都会在干净环境中启动&#xA;VM 执行器 每个作业都需要加载一个 vm 整个操作系统，意味着会非常慢&#xA;Kubernetes 执行器 意味着现在有一个集群，将创建一个新的Kubernetes Pod 作为运行环境&#xA;Docker Machine 执行器 docker 的扩展&#xA;创建docker主机，在一台机器上管理多个Docker 实例</description>
    </item>
    <item>
      <title>第3章：Gitlab CICD核心概念 作业、阶段、变量...</title>
      <link>http://localhost:1313/docsgo/cicd/gitlab/03-gitlab-cicd%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Sun, 21 Apr 2024 17:46:46 +0800</pubDate>
      <guid>http://localhost:1313/docsgo/cicd/gitlab/03-gitlab-cicd%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</guid>
      <description>gitlab-ci.yml&#xA;Jobs Job: 管道中的一个步骤或执行某个操作的工作流&#xA;script: 执行如何命令、Linux 命令 before_scrip: 安装依赖项、设置环境变量等 after_script: 通常用于清理作业环境，例如删除临时文件、停止服务等 pipeine&#xA;--- run_tests: before_script: - echo &amp;#34;Setting up test environment&amp;#34; - apk add yamllint script: - echo &amp;#34;Running tests&amp;#34; - yamllint gitlab-ci.yml after_script: - echo &amp;#34;Cleaning up test environment&amp;#34; build_image: script: - echo &amp;#34;Building image&amp;#34; - docker build -t node_exporter . push_image: script: - echo &amp;#34;Pushing image&amp;#34; - docker push node_exporter 实验项目：https://gitlab.com/baimiyishu13/mynodeapp-cicd-project&#xA;创建：.gitlab-ci.yml 会自动识别为管道文件&#xA;stage &amp;amp; stages 如果不想入上并行，则使用 stage</description>
    </item>
    <item>
      <title>第2章：CI/CD和GitLab比较</title>
      <link>http://localhost:1313/docsgo/cicd/gitlab/02-cicd%E5%92%8Cgitlab%E7%9A%84%E6%AF%94%E8%BE%83/</link>
      <pubDate>Sun, 21 Apr 2024 17:15:34 +0800</pubDate>
      <guid>http://localhost:1313/docsgo/cicd/gitlab/02-cicd%E5%92%8Cgitlab%E7%9A%84%E6%AF%94%E8%BE%83/</guid>
      <description>gitlab cicd 不是唯一的 cicd 工具&#xA;Jenkins vs gitlab&#xA;Jenkins：&#xA;仍然非常强大，集成了各种技术 很大插件、灵活 但是：Jenkins 已经存在了很长时间，实际上并不是那么先进 jenkins 只是一个 cicd 工具 Jnekins 安装在自己的服务器，自己管理一切 GitLab：&#xA;保持与时俱进 构建功能齐全的 devops 平台 非常符合行业发展的软件 提供了很大开箱即用的工具、用于测试、存储、部署 gitlab 托管存储库，从存储库中构建 Jenkins 不仅可以托管，还可以在自己服务器上部署 </description>
    </item>
    <item>
      <title>第1章：概述</title>
      <link>http://localhost:1313/docsgo/cicd/gitlab/01-%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Sat, 20 Apr 2024 21:03:14 +0800</pubDate>
      <guid>http://localhost:1313/docsgo/cicd/gitlab/01-%E4%BB%8B%E7%BB%8D/</guid>
      <description>构建持续集成管道&#xA;使用实际的最佳的方式 做正确的事情&#xA;GitLab CI/CD 就是一个cicd平台&#xA;CI/CD 定义：【what is cicd】 CI/CD 平台可以做什么 Devops：&#xA;公司有一个应用程序，需要对其 编码、测试，有测试程序，构建打包，最后部署到服务器&#xA;每次改进程序、代码等，都可以让用户快速体验改改进。&#xA;每次更新：版本控制 这样就有了一个持续交付的变更&#xA;一个无休止的循环 cicd 这是 devops 过程的核心，是一个自动化方式频繁向客户交付应用程序更改的方法&#xA;CI、CD的实际含义：&#xA;CD：应用程序构建后部署到环境，但为了避免更改导致程序奔溃，即使是小的代码改动，所以发布前需要：&#xA;开发部署的第一阶段：Dev环境，与生产环境相似。 测试：【运行自动化测试（如单元测试、功能测试）】、分析代码测试 预生产环境：验证所有功能、性能测试 生产环境：最终部署阶段 整个阶段：会有人为干预，比如手动测试、审批等&#xA;CI：当开发人员将代码提交触发管道</description>
    </item>
  </channel>
</rss>
