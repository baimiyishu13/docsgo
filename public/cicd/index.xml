<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on docsGo</title>
    <link>http://localhost:1313/docsgo/cicd/</link>
    <description>Recent content in Home on docsGo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 21 Apr 2024 17:46:46 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/docsgo/cicd/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>03 Gitlab CICD核心概念</title>
      <link>http://localhost:1313/docsgo/cicd/gitlab/03-gitlab-cicd%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Sun, 21 Apr 2024 17:46:46 +0800</pubDate>
      <guid>http://localhost:1313/docsgo/cicd/gitlab/03-gitlab-cicd%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</guid>
      <description>gitlab-ci.yml&#xA;Jobs Job: 管道中的一个步骤或执行某个操作的工作流&#xA;script: 执行如何命令、Linux 命令 before_scrip: 安装依赖项、设置环境变量等 after_script: 通常用于清理作业环境，例如删除临时文件、停止服务等 pipeine&#xA;--- run_tests: before_script: - echo &amp;#34;Setting up test environment&amp;#34; - apk add yamllint script: - echo &amp;#34;Running tests&amp;#34; - yamllint gitlab-ci.yml after_script: - echo &amp;#34;Cleaning up test environment&amp;#34; build_image: script: - echo &amp;#34;Building image&amp;#34; - docker build -t node_exporter . push_image: script: - echo &amp;#34;Pushing image&amp;#34; - docker push node_exporter 实验项目：https://gitlab.com/baimiyishu13/mynodeapp-cicd-project&#xA;创建：.gitlab-ci.yml 会自动识别为管道文件&#xA;stage &amp;amp; stages 如果不想入上并行，则使用 stage</description>
    </item>
    <item>
      <title>02-CI/CD和GitLab的比较</title>
      <link>http://localhost:1313/docsgo/cicd/gitlab/02-cicd%E5%92%8Cgitlab%E7%9A%84%E6%AF%94%E8%BE%83/</link>
      <pubDate>Sun, 21 Apr 2024 17:15:34 +0800</pubDate>
      <guid>http://localhost:1313/docsgo/cicd/gitlab/02-cicd%E5%92%8Cgitlab%E7%9A%84%E6%AF%94%E8%BE%83/</guid>
      <description>gitlab cicd 不是唯一的 cicd 工具&#xA;Jenkins vs gitlab&#xA;Jenkins：&#xA;仍然非常强大，集成了各种技术 很大插件、灵活 但是：Jenkins 已经存在了很长时间，实际上并不是那么先进 jenkins 只是一个 cicd 工具 Jnekins 安装在自己的服务器，自己管理一切 GitLab：&#xA;保持与时俱进 构建功能齐全的 devops 平台 非常符合行业发展的软件 提供了很大开箱即用的工具、用于测试、存储、部署 gitlab 托管存储库，从存储库中构建 Jenkins 不仅可以托管，还可以在自己服务器上部署 </description>
    </item>
    <item>
      <title>01 介绍</title>
      <link>http://localhost:1313/docsgo/cicd/gitlab/01-%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Sat, 20 Apr 2024 21:03:14 +0800</pubDate>
      <guid>http://localhost:1313/docsgo/cicd/gitlab/01-%E4%BB%8B%E7%BB%8D/</guid>
      <description>构建持续集成管道&#xA;使用实际的最佳的方式 做正确的事情&#xA;GitLab CI/CD 就是一个cicd平台&#xA;CI/CD 定义：【what is cicd】 CI/CD 平台可以做什么 Devops：&#xA;公司有一个应用程序，需要对其 编码、测试，有测试程序，构建打包，最后部署到服务器&#xA;每次改进程序、代码等，都可以让用户快速体验改改进。&#xA;每次更新：版本控制 这样就有了一个持续交付的变更&#xA;一个无休止的循环 cicd 这是 devops 过程的核心，是一个自动化方式频繁向客户交付应用程序更改的方法&#xA;CI、CD的实际含义：&#xA;CD：应用程序构建后部署到环境，但为了避免更改导致程序奔溃，即使是小的代码改动，所以发布前需要：&#xA;开发部署的第一阶段：Dev环境，与生产环境相似。 测试：【运行自动化测试（如单元测试、功能测试）】、分析代码测试 预生产环境：验证所有功能、性能测试 生产环境：最终部署阶段 整个阶段：会有人为干预，比如手动测试、审批等&#xA;CI：当开发人员将代码提交触发管道</description>
    </item>
  </channel>
</rss>
