<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on docsGo</title>
    <link>http://localhost:1313/docsgo/monitor/</link>
    <description>Recent content in Home on docsGo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 03 Apr 2024 15:30:58 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/docsgo/monitor/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>YugabyteDB</title>
      <link>http://localhost:1313/docsgo/monitor/yugabytedb/</link>
      <pubDate>Wed, 03 Apr 2024 15:30:58 +0800</pubDate>
      <guid>http://localhost:1313/docsgo/monitor/yugabytedb/</guid>
      <description>参考：https://docs.yugabyte.com/preview/explore/observability/prometheus-integration/macos/&#xA;下载:&#xA;wget https://github.com/yugabyte/yb-sample-apps/releases/download/v1.4.1/yb-sample-apps.jar -O yb-sample-apps.jar 运行&#xA;java -jar ./yb-sample-apps.jar \ --workload CassandraKeyValue \ --nodes 127.0.0.1:9043 \ --num_threads_read 1 \ --num_threads_write 1 java -jar ./yb-sample-apps.jar \ --workload CassandraKeyValue \ --nodes 10.61.200.238:5433 \ --num_threads_read 1 \ --num_threads_write 1 \ --username thingswise_admin \ --password 5gwqLJqeIPHBue0cDSyJN05fo4deEf38QW2guas41zNw6qlrbqm8AaCG4Embg8AbAdoA1yq2DWbdw1CQHgm484NE7AQGHxc7c281dWpUWf9JZGs2e2PckrAd9D1bVNDf java -jar yb-sample-apps.jar --workload CassandraKeyValue --nodes 10.61.200.238:9043 --username thingswise_admin --password 5gwqLJqeIPHBue0cDSyJN05fo4deEf38QW2guas41zNw6qlrbqm8AaCG4Embg8AbAdoA1yq2DWbdw1CQHgm484NE7AQGHxc7c281dWpUWf9JZGs2e2PckrAd9D1bVNDf --ssl_key /etc/ssl/yugabyte/yugabytedb.crt java -jar yb-sample-apps.jar \ --workload CassandraKeyValue \ --nodes 127.0.0.1:9042 \ --username thingswise_admin \ --password 5gwqLJqeIPHBue0cDSyJN05fo4deEf38QW2guas41zNw6qlrbqm8AaCG4Embg8AbAdoA1yq2DWbdw1CQHgm484NE7AQGHxc7c281dWpUWf9JZGs2e2PckrAd9D1bVNDf \ --ssl /etc/ssl/yugabyte/yugabytedb.</description>
    </item>
    <item>
      <title>监控可观测性</title>
      <link>http://localhost:1313/docsgo/monitor/%E7%9B%91%E6%8E%A7%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/</link>
      <pubDate>Tue, 02 Apr 2024 09:42:02 +0800</pubDate>
      <guid>http://localhost:1313/docsgo/monitor/%E7%9B%91%E6%8E%A7%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/</guid>
      <description>监控简述 概述 一个技术的出现必定有它的原因（解决了什么问题）&#xA;在现代的 DevOps 中手动处理变得越来越复杂，因此需要更多的自动化；&#xA;通常会拥有：&#xA;多个项目、多个集群 运行非常多的容器，并且有成千上百的不同进程在运行 基础设施和 应用是相连的 因此需要去保持这样的设置去平稳运行、并且没有应用程序去停机，时间是非常重要的，也是有挑战性的。&#xA;需要解决：&#xA;无法了解硬件级别或上层发生的情况 应用程序级别、如 Error、响应延迟、硬件故障、或过载，可能耗尽资源等 在如此复杂的环境中，当部署大量的服务和应用程序时，可能出现很多问题，其中任何一个都可能导致程序崩溃，并且导致其他服务失败。&#xA;突然的应用程序对用户变得不可用，必须快速的确定这整个应用程序中是到底出现了什么问题 并且在手动调试过程中可能会很困难 且 耗时 示例场景 服务器内存不足，并启动了一个正在运行的容器，该容器在 Kubernetes 集群中两个数据库 Pod 之间提供数据，这反过来又导致：&#xA;两个数据库部分失败，该数据库被身份验证服务器使用，该服务器也停止工作，因为数据库变得不可用 然后依赖于该身份验证服务的应用程序无法再对 UI 中的用户进行身份验证 用户角度：只看到 UI 中的错误，无法登陆 所以：遇到这种情况，如何知道实际上出了什么问题，对集群内部发生的情况如果看不到事件发生的整个事件链的红线，只看到错误，如何去排查修复，以便检查服务是否有返回并运行正常，是否现实异常，服务是否在正常运行，为什么会崩溃。&#xA;拥有一个工具使得搜索问题过程更加高效&#xA;持续监控服务是否正常运行 在一项服务崩溃时立即那个运维人员发出告警 以便确切的知道发生了什么，甚至可以在问题发生前识别问题 提醒运维人员 例如在上述例子中，可以去定期检查每台 服务器的内存，做内存上限告警（当在一段时间内飙升到某个值，例如70%）或者不间断的去增加。&#xA;另外一种情况：突然停止看到应用程序的日志，因为 elasticsear 可接受的日志因为磁盘空间的不足或 elasticsear 再次达到为其分配的存储限制， 监控工具将 持续检查磁盘空间 ，可以额告诉监控何时触发告警。&#xA;第三种情况：即应用程序由于一项服务奔溃而突然变得很慢，并开始在网络中循环发生数百条错误信息，这会产生高网络流量并减慢其他服务的速度，有一个工具可以检测网络负载中的此类峰值，并且告诉哪个服务负责导致的，可以及时发出告警 解决这个问题。&#xA;自动监控和警报：Promethers 监视特定的事物，该事物可以是如何东西，可以是整个Linux服务器、Windows服务器、也可以是独立的Apache服务器、单个应用程序 或 像数据库这样的服务，以及Prometheus 监视的哪些东西称为目标.&#xA;每个目标（targets）都有Linux serevr的监视单位，可以是 CPU、内存、磁盘、网路等，也可以是异常数据请求、请求持续时间以及 想要监视的目标的单位称之为 指标，指标是保存着 TSDB&#xA;收集指标 一个有趣的问题：如何去从目标收集这些指标&#xA;prometheus 从 http 端点从 metrics 中提取指标数据 默认情况下是 主机IP+端口:/metrics 目标必须公开/metrics接口，且必须采用 prometheus能够理解的格式 一些服务本身有/metrics 一些没有，因此需要额外的组件来执行此操作 ，该组件是导出器 Exporter</description>
    </item>
    <item>
      <title>Vmauth</title>
      <link>http://localhost:1313/docsgo/monitor/victoriametrics/vmauth/</link>
      <pubDate>Wed, 27 Mar 2024 16:38:42 +0800</pubDate>
      <guid>http://localhost:1313/docsgo/monitor/victoriametrics/vmauth/</guid>
      <description>简单身份验证代理&#xA;下载：https://github.com/VictoriaMetrics/VictoriaMetrics/releases/download/v1.99.0/vmutils-linux-amd64-v1.99.0.tar.gz&#xA;减压到：/usr/local/bin&#xA;system 文件&#xA;使用了TLS 加密 配置文件参考官方文档即可 cat &amp;lt;&amp;lt;EOF &amp;gt; /etc/systemd/system/vmauth.service [Unit] Description=Description=vmauth.service After=network.target [Service] Type=simple ExecStart=/usr/local/bin/vmauth-prod -auth.config=/etc/auth/config.yml -tls -tlsCertFile=/root/.ssh/cert.pem -tlsKeyFile=/root/.ssh/key.pem SyslogIdentifier=victoriametrics Restart=always [Install] WantedBy=multi-user.target EOF </description>
    </item>
    <item>
      <title>VictoriaMetrics</title>
      <link>http://localhost:1313/docsgo/monitor/victoriametrics/victoriametrics/</link>
      <pubDate>Wed, 27 Mar 2024 16:33:08 +0800</pubDate>
      <guid>http://localhost:1313/docsgo/monitor/victoriametrics/victoriametrics/</guid>
      <description>安装方式多种参考官网文档&#xA;二进制安装：&#xA;下载：https://github.com/VictoriaMetrics/VictoriaMetrics/releases/download/v1.99.0/victoria-metrics-linux-amd64-v1.99.0.tar.gz 解压到 /usr/local/bin&#xA;创建数据目录：例如 /data/victoria-metrics 启动文件：&#xA;兼容 prometheus 配置文件格式 cat &amp;lt;&amp;lt;EOF &amp;gt;/etc/systemd/system/victoria-metrics.service [Unit] Description=Description=VictoriaMetrics service After=network.target [Service] Type=simple LimitNOFILE=2097152 ExecStart=/usr/local/bin/victoria-metrics-prod -storageDataPath=/data/victoria-metrics -promscrape.config=/etc/victoriametrics/prometheus.yaml SyslogIdentifier=victoriametrics Restart=always PrivateTmp=yes ProtectHome=yes NoNewPrivileges=yes ProtectSystem=full [Install] WantedBy=multi-user.target 暴露端口：8428</description>
    </item>
    <item>
      <title>Alertmanager</title>
      <link>http://localhost:1313/docsgo/monitor/alert/alertmanager/</link>
      <pubDate>Wed, 27 Mar 2024 16:03:21 +0800</pubDate>
      <guid>http://localhost:1313/docsgo/monitor/alert/alertmanager/</guid>
      <description>二进制安装：&#xA;下载：https://github.com/prometheus/alertmanager/releases/download/v0.27.0/alertmanager-0.27.0.linux-amd64.tar.gz&#xA;下载减压 - &amp;gt; /usr/local/bin&#xA;cta &amp;lt;&amp;lt;EOF &amp;gt;/etc/systemd/system/alertmanager.service ### Alertmanager systemd [Unit] Description=Alertmanager After=network-online.target [Service] User=alertmanager Group=alertmanager Type=simple ExecStart=/usr/local/bin/alertmanager --config.file=/etc/alertmanager/alertmanager.yml Restart=always [Install] WantedBy=multi-user.target EOF 配置文件：alertmanager.yml&#xA;参考官方配置 示例：企业微信&#xA;global: resolve_timeout: 5m route: group_by: [&amp;#39;alertname&amp;#39;] group_wait: 10s group_interval: 1m repeat_interval: 30m receiver: &amp;#39;web.hook&amp;#39; receivers: - name: &amp;#39;web.hook&amp;#39; webhook_configs: - url: &amp;#39;http://localhost:8999/webhook&amp;#39; send_resolved: true 访问：9093端口</description>
    </item>
    <item>
      <title>Vmagent</title>
      <link>http://localhost:1313/docsgo/monitor/victoriametrics/vmagent/</link>
      <pubDate>Wed, 27 Mar 2024 15:48:16 +0800</pubDate>
      <guid>http://localhost:1313/docsgo/monitor/victoriametrics/vmagent/</guid>
      <description>接入腾讯云监控，vmagent 会将监控数据 pull 到腾讯云 victoriametrics TSDB&#xA;前提 下载包 wget https://github.com/VictoriaMetrics/VictoriaMetrics/releases/download/v1.99.0/vmutils-linux-amd64-v1.99.0.tar.gz 证书文件放置在 /etc/ssl/certs cert.pem key.pem 安全 证书：&#xA;🎉 用于 vmagent传输数据 TLS加密&#xA;cat &amp;lt;&amp;lt;EOF &amp;gt; openssl.cnf [req] req_extensions = v3_req distinguished_name = req_distinguished_name [req_distinguished_name] [v3_req] basicConstraints = CA:FALSE keyUsage = nonRepudiation, digitalSignature, keyEncipherment subjectAltName = @alt_names [alt_names] IP.1 = 1.15.176.240 EOF openssl req -x509 -nodes -days 3650 -newkey rsa:2048 \ -keyout key.pem -out cert.pem \ -subj &amp;#34;/C=CN/ST=shanxi/L=xian/O=IT/CN=monitor&amp;#34; \ -config.yaml openssl.cnf 接入环境配置：&#xA;cat &amp;lt;&amp;lt;EOF &amp;gt;/etc/ssl/certs/cert.</description>
    </item>
    <item>
      <title>Rulers</title>
      <link>http://localhost:1313/docsgo/monitor/alert/rulers/</link>
      <pubDate>Tue, 26 Mar 2024 11:27:25 +0800</pubDate>
      <guid>http://localhost:1313/docsgo/monitor/alert/rulers/</guid>
      <description>访问：告警规则集合链接&#xA;Node Exporter # 主机和硬件相关的告警规则 groups: # 磁盘使用率告警 - name: 磁盘使用率告警 rules: - alert: 磁盘使用率告警 expr: floor(((node_filesystem_size_bytes{heihutao!~&amp;#34;heihutao-tw-dev|heihutao-tw-test|heihutao-tw-dp&amp;#34;} - node_filesystem_free_bytes) * 100) / (node_filesystem_avail_bytes + node_filesystem_size_bytes - node_filesystem_free_bytes)) &amp;gt; 85 for: 1m labels: severity: 严重 annotations: summary: &amp;#34;磁盘使用率超过85% (实例 {{ $labels.instance }})&amp;#34; description: &amp;#34;设备 {{ $labels.device }} 挂载在 {{ $labels.mountpoint }} 的磁盘使用率超过了 85%。(当前值: {{ $value }}%)&amp;#34; # 内存使用率告警 - name: 内存告警规则 rules: - alert: &amp;#34;内存使用率告警&amp;#34; expr: floor((node_memory_MemTotal_bytes{heihutao!~&amp;#34;heihutao-tw-dev|heihutao-tw-test|heihutao-tw-dp&amp;#34;} - (node_memory_MemFree_bytes + node_memory_Buffers_bytes + node_memory_Cached_bytes)) / node_memory_MemTotal_bytes * 100) &amp;gt; 85 for: 3m labels: severity: 严重 annotations: summary: &amp;#34;内存使用率超过85% (实例 {{ $labels.</description>
    </item>
    <item>
      <title>Garfana</title>
      <link>http://localhost:1313/docsgo/monitor/grafana/garfana/</link>
      <pubDate>Tue, 26 Mar 2024 10:57:21 +0800</pubDate>
      <guid>http://localhost:1313/docsgo/monitor/grafana/garfana/</guid>
      <description>安装Grafna 访问：https://grafana.com/docs/grafana/latest/setup-grafana/installation/&#xA;设置 Grafana HTTPS 以确保网络流量安全 访问：https://grafana.com/docs/grafana/latest/setup-grafana/set-up-https/&#xA;步骤&#xA;生成自签名证书 生成自签名证书 打开该grafana.ini文件并编辑以下配置参数：&#xA;[server] http_addr = http_port = 3000 domain = mysite.com root_url = https://subdomain.mysite.com:3000 cert_key = /etc/grafana/grafana.key cert_file = /etc/grafana/grafana.crt enforce_domain = False protocol = https 注意：SSL 流量的标准端口是 443，您可以使用它来代替 Grafana 的默认端口 3000。</description>
    </item>
    <item>
      <title>Kube State Metrics</title>
      <link>http://localhost:1313/docsgo/monitor/exporter/kube-state-metrics/</link>
      <pubDate>Mon, 25 Mar 2024 10:23:51 +0800</pubDate>
      <guid>http://localhost:1313/docsgo/monitor/exporter/kube-state-metrics/</guid>
      <description>适用于集群版本，k8s v1.9&#xA;前提准备：&#xA;准备镜像 docker pull bitnami/kube-state-metrics:1.6.0 上传到所有worker节点&#xA;🎉 完成上述步骤再继续&#xA;部署：&#xA;--- apiVersion: v1 kind: ServiceAccount metadata: labels: app: kube-state-metrics name: kube-state-metrics namespace: kube-system --- apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata: name: kube-state-metrics rules: - apiGroups: [&amp;#34;&amp;#34;] resources: - configmaps - secrets - nodes - pods - services - resourcequotas - replicationcontrollers - limitranges - persistentvolumeclaims - persistentvolumes - namespaces - endpoints verbs: [&amp;#34;list&amp;#34;, &amp;#34;watch&amp;#34;] - apiGroups: [&amp;#34;extensions&amp;#34;] resources: - daemonsets - deployments - replicasets - ingresses verbs: [&amp;#34;list&amp;#34;, &amp;#34;watch&amp;#34;] - apiGroups: [&amp;#34;apps&amp;#34;] resources: - daemonsets - deployments - replicasets - statefulsets verbs: [&amp;#34;list&amp;#34;, &amp;#34;watch&amp;#34;] - apiGroups: [&amp;#34;batch&amp;#34;] resources: - cronjobs - jobs verbs: [&amp;#34;list&amp;#34;, &amp;#34;watch&amp;#34;] - apiGroups: [&amp;#34;autoscaling&amp;#34;] resources: - horizontalpodautoscalers verbs: [&amp;#34;list&amp;#34;, &amp;#34;watch&amp;#34;] - apiGroups: [&amp;#34;policy&amp;#34;] resources: - poddisruptionbudgets verbs: [&amp;#34;list&amp;#34;, &amp;#34;watch&amp;#34;] - apiGroups: [&amp;#34;certificates.</description>
    </item>
    <item>
      <title>Node Exporter</title>
      <link>http://localhost:1313/docsgo/monitor/exporter/node-exporter/</link>
      <pubDate>Mon, 25 Mar 2024 09:28:48 +0800</pubDate>
      <guid>http://localhost:1313/docsgo/monitor/exporter/node-exporter/</guid>
      <description>🎉 默认端口 9100，因为与业务端口冲突，所以此处为9101&#xA;node exporter 1.下载&#xA;wget https://github.com/prometheus/node_exporter/releases/download/v1.7.0/node_exporter-1.7.0.linux-amd64.tar.gz 2.减压后node_exporter移动&#xA;tar -zxvf node_exporter-1.7.0.linux-amd64.tar.gz -C /usr/local/bin/ --strip-components=1 3.service 文件&#xA;端口默认9100，会与yugabyte 端口冲突&#xA;cat &amp;lt;&amp;lt;EOF | tee /etc/systemd/system/node_exporter.service [Unit] Description=Node Exporter After=network.target [Service] Type=simple ExecStart=/usr/local/bin/node_exporter --web.listen-address=:9101 Restart=always [Install] WantedBy=multi-user.target EOF 启动服务 systemctl daemon-reload systemctl restart node_exporter.service systemctl status node_exporter.service systemctl enable node_exporter.service 接入：&#xA;- job_name: &amp;#39;node&amp;#39; static_configs: - targets: [&amp;#39;localhost:9101&amp;#39;] </description>
    </item>
    <item>
      <title>Mysql Exporter</title>
      <link>http://localhost:1313/docsgo/monitor/exporter/mysql-exporter/</link>
      <pubDate>Mon, 25 Mar 2024 09:28:39 +0800</pubDate>
      <guid>http://localhost:1313/docsgo/monitor/exporter/mysql-exporter/</guid>
      <description>🎉 暴露端口 9104&#xA;创建 /etc/mysqlexporter 目录并在其中创建 .my.cnf 文件，该文件包含 MySQL 用户名和密码。 🔔 user、password 数据库用户密码&#xA;mkdir -p /etc/mysqlexporter echo -e &amp;#34;[client]\nuser=$user\npassword=$password&amp;#34; &amp;gt; /etc/mysqlexporter/.my.cnf 将 mysqld_exporter 复制到 /usr/local/bin/ 目录。 cp ./bin/mysqld_exporter /usr/local/bin/ 创建一个名为 mysql_exporter.service 的 systemd 服务文件，该文件在 /etc/systemd/system/ 目录下。 cat &amp;lt;&amp;lt;EOF &amp;gt; /etc/systemd/system/mysql_exporter.service [Unit] Description=mysql Exporter After=network.target [Service] Type=simple ExecStart=/usr/local/bin/mysqld_exporter --config.my-cnf=/etc/mysqlexporter/.my.cnf [Install] WantedBy=multi-user.target EOF 重新加载 systemd 的配置，启动 mysql_exporter.service 服务，并将其设置为开机启动。 systemctl daemon-reload systemctl start mysql_exporter.service systemctl enable mysql_exporter.service 验证 curl 127.0.0.1:9104/metrics 接入：&#xA;- job_name: &amp;#39;mysql&amp;#39; static_configs: - targets: [&amp;#39;mysql-exporter:9104&amp;#39;] Grafana 模版 ID ：17320</description>
    </item>
    <item>
      <title>Mongodb Exporter</title>
      <link>http://localhost:1313/docsgo/monitor/exporter/mongodb-exporter/</link>
      <pubDate>Mon, 25 Mar 2024 09:28:25 +0800</pubDate>
      <guid>http://localhost:1313/docsgo/monitor/exporter/mongodb-exporter/</guid>
      <description>🎉 mongodb exporter&#xA;下载：&#xA;wget https://github.com/percona/mongodb_exporter/releases/download/v0.11.2/mongodb_exporter-0.11.2.linux-amd64.tar.gz 减压后将 mongodb_exporter 二进制文件移动：&#xA;mv mongodb_exporter /usr/local/bin/ 在 MongoDB 中创建一个名为 prometheus 的用户&#xA;进入mongodb mongo mongo.skydns.local --ssl --sslPEMKeyFile /etc/ssl/mongo/client.pem --sslCAFile /etc/ssl/mongo/ca.crt --authenticationDatabase &amp;#39;$external&amp;#39; --authenticationMechanism MONGODB-X509 创建用户 use admin db.createUser({ user: &amp;#34;prometheus&amp;#34;, pwd: &amp;#34;prometheus&amp;#34;, roles: [ { role: &amp;#34;read&amp;#34;, db: &amp;#34;admin&amp;#34; }, { role: &amp;#34;readAnyDatabase&amp;#34;, db: &amp;#34;admin&amp;#34; }, { role: &amp;#34;clusterMonitor&amp;#34;, db: &amp;#34;admin&amp;#34; } ] }); 创建service文件&#xA;‼️ 修改证书路径 和 IP&#xA;cat &amp;lt;&amp;lt;EOF &amp;gt; /etc/systemd/system/mongodb_exporter.service [Unit] Description=mongodb_exporter After=network.</description>
    </item>
    <item>
      <title>Etcd Exporter</title>
      <link>http://localhost:1313/docsgo/monitor/exporter/etcd-exporter/</link>
      <pubDate>Mon, 25 Mar 2024 09:28:11 +0800</pubDate>
      <guid>http://localhost:1313/docsgo/monitor/exporter/etcd-exporter/</guid>
      <description>特定环境，每个节点 /etc/ssl/etcd/ssl 有etcd 证书&#xA;将以下配置写入：vmagent.yaml ‼️ 注意修改证书名为实际证书名，修改 etcd-ip&#xA;- job_name: &amp;#34;etcd&amp;#34; scheme: https tls_config: insecure_skip_verify: true cert_file: /etc/ssl/etcd/ssl/node-dev-master.pem key_file: /etc/ssl/etcd/ssl/node-dev-master-key.pem ca_file: /etc/ssl/etcd/ssl/ca.pem static_configs: - targets: [&amp;#39;etcd-ip1:2379&amp;#39;,&amp;#39;etcd-ip2:2379&amp;#39;,&amp;#39;etcd-ip3:2379&amp;#39;] </description>
    </item>
    <item>
      <title>Elasticsearch Exporter</title>
      <link>http://localhost:1313/docsgo/monitor/exporter/elasticsearch-exporter/</link>
      <pubDate>Mon, 25 Mar 2024 09:27:13 +0800</pubDate>
      <guid>http://localhost:1313/docsgo/monitor/exporter/elasticsearch-exporter/</guid>
      <description>监控 9114端口&#xA;下载减压：&#xA;wget https://github.com/prometheus-community/elasticsearch_exporter/releases/download/v1.5.0/elasticsearch_exporter-1.5.0.linux-amd64.tar.gz 2.减压后node_exporter移动&#xA;cp elasticsearch_exporter-1.5.0.linux-amd64/elasticsearch_exporter /usr/local/bin/ 3.service 文件&#xA;⚠️ &amp;ndash;es.uri 参数地址指定为 elasticsearch 节点IP&#xA;cat &amp;lt;&amp;lt;EOF | tee /etc/systemd/system/elasticsearch_exporter.service [Unit] Description=elasticsearch_exporter After=network.target [Service] Type=simple ExecStart=/usr/local/bin/elasticsearch_exporter --es.uri http://10.61.200.236:9200 --web.listen-address 0.0.0.0:9114 Restart=always [Install] WantedBy=multi-user.target EOF 启动服务 systemctl daemon-reload systemctl restart elasticsearch_exporter systemctl status elasticsearch_exporter systemctl enable elasticsearch_exporter 接入： - job_name: &amp;#39;elasticsearch_exporter&amp;#39; static_configs: - targets: [&amp;#39;10.61.200.236:9114&amp;#39;] Grafana 导入ID：14191</description>
    </item>
    <item>
      <title>Cassandra Exporter</title>
      <link>http://localhost:1313/docsgo/monitor/exporter/cassandra-exporter/</link>
      <pubDate>Mon, 25 Mar 2024 09:26:56 +0800</pubDate>
      <guid>http://localhost:1313/docsgo/monitor/exporter/cassandra-exporter/</guid>
      <description>在cassandra 节点 - data1&#xA;下载包 wget https://repo1.maven.org/maven2/io/prometheus/jmx/jmx_prometheus_javaagent/0.19.0/jmx_prometheus_javaagent-0.19.0.jar 放在data1:&#xA;mv jmx_prometheus_javaagent-0.19.0.jar /usr/share/cassandra/lib/ 2.1 配置修改1 /etc/cassandra/conf/cassandra-jmx.yaml&#xA;lowercaseOutputLabelNames: true lowercaseOutputName: true whitelistObjectNames: [&amp;#34;org.apache.cassandra.metrics:*&amp;#34;] # ColumnFamily is an alias for Table metrics blacklistObjectNames: [&amp;#34;org.apache.cassandra.metrics:type=ColumnFamily,*&amp;#34;] rules: # Generic gauges with 0-2 labels - pattern: org.apache.cassandra.metrics&amp;lt;type=(\S*)(?:, ((?!scope)\S*)=(\S*))?(?:, scope=(\S*))?, name=(\S*)&amp;gt;&amp;lt;&amp;gt;Value name: cassandra_$1_$5 type: GAUGE labels: &amp;#34;$1&amp;#34;: &amp;#34;$4&amp;#34; &amp;#34;$2&amp;#34;: &amp;#34;$3&amp;#34; # # Emulate Prometheus &amp;#39;Summary&amp;#39; metrics for the exported &amp;#39;Histogram&amp;#39;s. # TotalLatency is the sum of all latencies since server start # - pattern: org.</description>
    </item>
  </channel>
</rss>
