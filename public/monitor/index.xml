<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Monitors on docsGo</title>
    <link>http://localhost:1313/docsgo/monitor/</link>
    <description>Recent content in Monitors on docsGo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 02 Apr 2024 09:42:02 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/docsgo/monitor/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>监控可观测性</title>
      <link>http://localhost:1313/docsgo/monitor/%E7%9B%91%E6%8E%A7%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/</link>
      <pubDate>Tue, 02 Apr 2024 09:42:02 +0800</pubDate>
      <guid>http://localhost:1313/docsgo/monitor/%E7%9B%91%E6%8E%A7%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/</guid>
      <description>可观测性体系概述 云原生监控可观测性是指在云原生架构中，通过使用各种工具和技术来实现对应用程序和基础设施的监控告警、日志、故障排除等功能的一套完整的解决方案。&#xA;可观测性架构分层和主要的可观测能力:&#xA;数据采集 **指标采集：**提供基于Prometheus的云原生监控插件，相比于开源版本，具备轻量化，开箱即用等优势。云原生监控插件&#xA;数据监控 victoriaMetrics：是一个支持高可用、经济高效且可扩展的监控解决方案和时间序列数据库，可用于 Prometheus 监控数据做长期远程存储。实时监控相关资源，分析健康状态，提供灵活丰富的数据可视化功能，帮助及时发现故障，全面掌握实时运行状况。&#xA;监控告警 alertmanager：它支持丰富的告警通知渠道，而且很容易做到告警信息进行去重，降噪，分组等，是一款前卫的告警通知系统。通过在定义告警规则，周期性的对告警规则进行计算，如果满足告警触发条件就会向 Alertmanager 发送告警信息。&#xA;数据观测 Grafana：是一个可视化面板，有着非常漂亮的图表和布局展示，功能齐全的度量仪表盘和图形编辑器，支持 Graphite、zabbix、InfluxDB、Prometheus、OpenTSDB、Elasticsearch 等作为数据源，比 Prometheus 自带的图表展示功能强大太多，更加灵活，有丰富的插件，功能更加强大。&#xA;监控系统概述 监控系统是可实时监控应用及资源，采集各项指标及事件等数据以分析健康状态，提供全面、清晰、多维度数据可视化能力，兼容主流开源组件，并提供快捷故障定位的能力。&#xA;功能介绍 洞察力：提供了采集主机信息，采集数据库信息，以及Kubernetes原生类型的容器监控能力，支持集群、节点、工作负载、容器组和事件的监控。&#xA;**仪表盘：**仪表盘可将不同图表汇聚到同一个屏幕上，通过不同的仪表形式来展示资源数据，进而全面、深入地掌握监控数据。&#xA;优势 监控中心深度整合云原生监控项目victoriaMetrics。对关键指标、事件等运维数据进行统一采集、存储和可视化展现，精心打造云原生应用的良好可观测性能力。 将基础设施监控和应用负载监控进行关联，提供全栈监控，能够随时随地清晰地感知基础设施和应用负载状态。 能够对Kubernetes集群、节点、容器组（Pod）等进行详细监控，对业务提供端到端追踪和可视化，提供集群健康诊断能力，大大缩短问题分析定位时间。 提供开箱即用的插件安装、数据采集、云原生监控能力，相比基于开源组件构建的监控能力，在可靠性、高可用、安装部署便捷性上更具有竞争力，能够更好地为应用保驾护航。 提供了轻量化的指标采集插件，和社区Prometheus相比，资源使用量大大降低，部署模式方便快捷。 监控中心架构 监控插件将在用户集群中采集exporter暴露的指标，通过vmagent RemoteWrite的方式，将数据写入至VictoraMetrics实例。&#xA;监控中心将基于VictoraMetrics实例中存储的指标，提供容器洞察、健康诊断、仪表盘的功能。&#xA;将集群内的监控指标通过Token认证鉴权的方式上报三方监控平台，并且做TLS数据加密。&#xA;VictoraMetrics监控 VictoriaMetrics(VM) 是一个支持高可用、经济高效且可扩展的监控解决方案和时间序列数据库，可用来解决 Prometheus 的高可用和远程存储的问题，是一个可水平扩容的本地全量持久化存储方案，VictoriaMetrics 不仅仅是时序数据库，它的优势主要体现在一下几点。&#xA;对外支持 Prometheus 相关的 API，可以直接用于 Grafana 作为 Prometheus 数据源使用 指标数据摄取和查询具备高性能和良好的可扩展性，性能比 InfluxDB 和 TimescaleDB 高出 20 倍 在处理高基数时间序列时，内存方面也做了优化，比 InfluxDB 少 10x 倍，比 Prometheus、Thanos 或 Cortex 少 7 倍 高性能的数据压缩方式，与 TimescaleDB 相比，可以将多达 70 倍的数据点存入有限的存储空间，与 Prometheus、Thanos 或 Cortex 相比，所需的存储空间减少 7 倍 它针对具有高延迟 IO 和低 IOPS 的存储进行了优化 提供全局的查询视图，多个 Prometheus 实例或任何其他数据源可能会将数据摄取到 VictoriaMetrics 接入监控中心 接入监控中心将在集群中安装监控插件，该插件提供监控中心的指标采集功能。安装后将采集集群中的指标并上报监控中心VictoriaMetrics。</description>
    </item>
    <item>
      <title>Vmauth</title>
      <link>http://localhost:1313/docsgo/monitor/victoriametrics/vmauth/</link>
      <pubDate>Wed, 27 Mar 2024 16:38:42 +0800</pubDate>
      <guid>http://localhost:1313/docsgo/monitor/victoriametrics/vmauth/</guid>
      <description>简单身份验证代理&#xA;下载：https://github.com/VictoriaMetrics/VictoriaMetrics/releases/download/v1.99.0/vmutils-linux-amd64-v1.99.0.tar.gz&#xA;减压到：/usr/local/bin&#xA;system 文件&#xA;使用了TLS 加密 配置文件参考官方文档即可 cat &amp;lt;&amp;lt;EOF &amp;gt; /etc/systemd/system/vmauth.service [Unit] Description=Description=vmauth.service After=network.target [Service] Type=simple ExecStart=/usr/local/bin/vmauth-prod -auth.config=/etc/auth/config.yml -tls -tlsCertFile=/root/.ssh/cert.pem -tlsKeyFile=/root/.ssh/key.pem SyslogIdentifier=victoriametrics Restart=always [Install] WantedBy=multi-user.target EOF </description>
    </item>
    <item>
      <title>VictoriaMetrics</title>
      <link>http://localhost:1313/docsgo/monitor/victoriametrics/victoriametrics/</link>
      <pubDate>Wed, 27 Mar 2024 16:33:08 +0800</pubDate>
      <guid>http://localhost:1313/docsgo/monitor/victoriametrics/victoriametrics/</guid>
      <description>安装方式多种参考官网文档&#xA;二进制安装：&#xA;下载：https://github.com/VictoriaMetrics/VictoriaMetrics/releases/download/v1.99.0/victoria-metrics-linux-amd64-v1.99.0.tar.gz 解压到 /usr/local/bin&#xA;创建数据目录：例如 /data/victoria-metrics 启动文件：&#xA;兼容 prometheus 配置文件格式 cat &amp;lt;&amp;lt;EOF &amp;gt;/etc/systemd/system/victoria-metrics.service [Unit] Description=Description=VictoriaMetrics service After=network.target [Service] Type=simple LimitNOFILE=2097152 ExecStart=/usr/local/bin/victoria-metrics-prod -storageDataPath=/data/victoria-metrics -promscrape.config=/etc/victoriametrics/prometheus.yaml SyslogIdentifier=victoriametrics Restart=always PrivateTmp=yes ProtectHome=yes NoNewPrivileges=yes ProtectSystem=full [Install] WantedBy=multi-user.target 暴露端口：8428</description>
    </item>
    <item>
      <title>Alertmanager</title>
      <link>http://localhost:1313/docsgo/monitor/alert/alertmanager/</link>
      <pubDate>Wed, 27 Mar 2024 16:03:21 +0800</pubDate>
      <guid>http://localhost:1313/docsgo/monitor/alert/alertmanager/</guid>
      <description>二进制安装：&#xA;下载：https://github.com/prometheus/alertmanager/releases/download/v0.27.0/alertmanager-0.27.0.linux-amd64.tar.gz&#xA;下载减压 - &amp;gt; /usr/local/bin&#xA;cta &amp;lt;&amp;lt;EOF &amp;gt;/etc/systemd/system/alertmanager.service ### Alertmanager systemd [Unit] Description=Alertmanager After=network-online.target [Service] User=alertmanager Group=alertmanager Type=simple ExecStart=/usr/local/bin/alertmanager --config.file=/etc/alertmanager/alertmanager.yml Restart=always [Install] WantedBy=multi-user.target EOF 配置文件：alertmanager.yml&#xA;参考官方配置 示例：企业微信&#xA;global: resolve_timeout: 5m route: group_by: [&amp;#39;alertname&amp;#39;] group_wait: 10s group_interval: 1m repeat_interval: 30m receiver: &amp;#39;web.hook&amp;#39; receivers: - name: &amp;#39;web.hook&amp;#39; webhook_configs: - url: &amp;#39;http://localhost:8999/webhook&amp;#39; send_resolved: true 访问：9093端口</description>
    </item>
    <item>
      <title>Vmagent</title>
      <link>http://localhost:1313/docsgo/monitor/victoriametrics/vmagent/</link>
      <pubDate>Wed, 27 Mar 2024 15:48:16 +0800</pubDate>
      <guid>http://localhost:1313/docsgo/monitor/victoriametrics/vmagent/</guid>
      <description>接入腾讯云监控，vmagent 会将监控数据 pull 到腾讯云 victoriametrics TSDB&#xA;前提 下载包 wget https://github.com/VictoriaMetrics/VictoriaMetrics/releases/download/v1.99.0/vmutils-linux-amd64-v1.99.0.tar.gz 证书文件放置在 /etc/ssl/certs cert.pem key.pem 安全 证书：&#xA;🎉 用于 vmagent传输数据 TLS加密&#xA;cat &amp;lt;&amp;lt;EOF &amp;gt; openssl.cnf [req] req_extensions = v3_req distinguished_name = req_distinguished_name [req_distinguished_name] [v3_req] basicConstraints = CA:FALSE keyUsage = nonRepudiation, digitalSignature, keyEncipherment subjectAltName = @alt_names [alt_names] IP.1 = 1.15.176.240 EOF openssl req -x509 -nodes -days 3650 -newkey rsa:2048 \ -keyout key.pem -out cert.pem \ -subj &amp;#34;/C=CN/ST=shanxi/L=xian/O=IT/CN=monitor&amp;#34; \ -config.yaml openssl.cnf 接入环境配置：&#xA;cat &amp;lt;&amp;lt;EOF &amp;gt;/etc/ssl/certs/cert.</description>
    </item>
    <item>
      <title>Rulers</title>
      <link>http://localhost:1313/docsgo/monitor/alert/rulers/</link>
      <pubDate>Tue, 26 Mar 2024 11:27:25 +0800</pubDate>
      <guid>http://localhost:1313/docsgo/monitor/alert/rulers/</guid>
      <description>访问：告警规则集合链接&#xA;Node Exporter # 主机和硬件相关的告警规则 groups: # 磁盘使用率告警 - name: 磁盘使用率告警 rules: - alert: 磁盘使用率告警 expr: floor(((node_filesystem_size_bytes{heihutao!~&amp;#34;heihutao-tw-dev|heihutao-tw-test|heihutao-tw-dp&amp;#34;} - node_filesystem_free_bytes) * 100) / (node_filesystem_avail_bytes + node_filesystem_size_bytes - node_filesystem_free_bytes)) &amp;gt; 85 for: 1m labels: severity: 严重 annotations: summary: &amp;#34;磁盘使用率超过85% (实例 {{ $labels.instance }})&amp;#34; description: &amp;#34;设备 {{ $labels.device }} 挂载在 {{ $labels.mountpoint }} 的磁盘使用率超过了 85%。(当前值: {{ $value }}%)&amp;#34; # 内存使用率告警 - name: 内存告警规则 rules: - alert: &amp;#34;内存使用率告警&amp;#34; expr: floor((node_memory_MemTotal_bytes{heihutao!~&amp;#34;heihutao-tw-dev|heihutao-tw-test|heihutao-tw-dp&amp;#34;} - (node_memory_MemFree_bytes + node_memory_Buffers_bytes + node_memory_Cached_bytes)) / node_memory_MemTotal_bytes * 100) &amp;gt; 85 for: 3m labels: severity: 严重 annotations: summary: &amp;#34;内存使用率超过85% (实例 {{ $labels.</description>
    </item>
    <item>
      <title>Garfana</title>
      <link>http://localhost:1313/docsgo/monitor/grafana/garfana/</link>
      <pubDate>Tue, 26 Mar 2024 10:57:21 +0800</pubDate>
      <guid>http://localhost:1313/docsgo/monitor/grafana/garfana/</guid>
      <description>安装Grafna 访问：https://grafana.com/docs/grafana/latest/setup-grafana/installation/&#xA;设置 Grafana HTTPS 以确保网络流量安全 访问：https://grafana.com/docs/grafana/latest/setup-grafana/set-up-https/&#xA;步骤&#xA;生成自签名证书 生成自签名证书 打开该grafana.ini文件并编辑以下配置参数：&#xA;[server] http_addr = http_port = 3000 domain = mysite.com root_url = https://subdomain.mysite.com:3000 cert_key = /etc/grafana/grafana.key cert_file = /etc/grafana/grafana.crt enforce_domain = False protocol = https 注意：SSL 流量的标准端口是 443，您可以使用它来代替 Grafana 的默认端口 3000。</description>
    </item>
    <item>
      <title>Kube State Metrics</title>
      <link>http://localhost:1313/docsgo/monitor/exporter/kube-state-metrics/</link>
      <pubDate>Mon, 25 Mar 2024 10:23:51 +0800</pubDate>
      <guid>http://localhost:1313/docsgo/monitor/exporter/kube-state-metrics/</guid>
      <description>适用于集群版本，k8s v1.9&#xA;前提准备：&#xA;准备镜像 docker pull bitnami/kube-state-metrics:1.6.0 上传到所有worker节点&#xA;🎉 完成上述步骤再继续&#xA;部署：&#xA;--- apiVersion: v1 kind: ServiceAccount metadata: labels: app: kube-state-metrics name: kube-state-metrics namespace: kube-system --- apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata: name: kube-state-metrics rules: - apiGroups: [&amp;#34;&amp;#34;] resources: - configmaps - secrets - nodes - pods - services - resourcequotas - replicationcontrollers - limitranges - persistentvolumeclaims - persistentvolumes - namespaces - endpoints verbs: [&amp;#34;list&amp;#34;, &amp;#34;watch&amp;#34;] - apiGroups: [&amp;#34;extensions&amp;#34;] resources: - daemonsets - deployments - replicasets - ingresses verbs: [&amp;#34;list&amp;#34;, &amp;#34;watch&amp;#34;] - apiGroups: [&amp;#34;apps&amp;#34;] resources: - daemonsets - deployments - replicasets - statefulsets verbs: [&amp;#34;list&amp;#34;, &amp;#34;watch&amp;#34;] - apiGroups: [&amp;#34;batch&amp;#34;] resources: - cronjobs - jobs verbs: [&amp;#34;list&amp;#34;, &amp;#34;watch&amp;#34;] - apiGroups: [&amp;#34;autoscaling&amp;#34;] resources: - horizontalpodautoscalers verbs: [&amp;#34;list&amp;#34;, &amp;#34;watch&amp;#34;] - apiGroups: [&amp;#34;policy&amp;#34;] resources: - poddisruptionbudgets verbs: [&amp;#34;list&amp;#34;, &amp;#34;watch&amp;#34;] - apiGroups: [&amp;#34;certificates.</description>
    </item>
    <item>
      <title>Node Exporter</title>
      <link>http://localhost:1313/docsgo/monitor/exporter/node-exporter/</link>
      <pubDate>Mon, 25 Mar 2024 09:28:48 +0800</pubDate>
      <guid>http://localhost:1313/docsgo/monitor/exporter/node-exporter/</guid>
      <description>🎉 默认端口 9100，因为与业务端口冲突，所以此处为9101&#xA;node exporter 1.下载&#xA;wget https://github.com/prometheus/node_exporter/releases/download/v1.7.0/node_exporter-1.7.0.linux-amd64.tar.gz 2.减压后node_exporter移动&#xA;tar -zxvf node_exporter-1.7.0.linux-amd64.tar.gz -C /usr/local/bin/ --strip-components=1 3.service 文件&#xA;端口默认9100，会与yugabyte 端口冲突&#xA;cat &amp;lt;&amp;lt;EOF | tee /etc/systemd/system/node_exporter.service [Unit] Description=Node Exporter After=network.target [Service] Type=simple ExecStart=/usr/local/bin/node_exporter --web.listen-address=:9101 Restart=always [Install] WantedBy=multi-user.target EOF 启动服务 systemctl daemon-reload systemctl restart node_exporter.service systemctl status node_exporter.service systemctl enable node_exporter.service 接入：&#xA;- job_name: &amp;#39;node&amp;#39; static_configs: - targets: [&amp;#39;localhost:9101&amp;#39;] </description>
    </item>
    <item>
      <title>Mysql Exporter</title>
      <link>http://localhost:1313/docsgo/monitor/exporter/mysql-exporter/</link>
      <pubDate>Mon, 25 Mar 2024 09:28:39 +0800</pubDate>
      <guid>http://localhost:1313/docsgo/monitor/exporter/mysql-exporter/</guid>
      <description>🎉 暴露端口 9104&#xA;创建 /etc/mysqlexporter 目录并在其中创建 .my.cnf 文件，该文件包含 MySQL 用户名和密码。 🔔 user、password 数据库用户密码&#xA;mkdir -p /etc/mysqlexporter echo -e &amp;#34;[client]\nuser=$user\npassword=$password&amp;#34; &amp;gt; /etc/mysqlexporter/.my.cnf 将 mysqld_exporter 复制到 /usr/local/bin/ 目录。 cp ./bin/mysqld_exporter /usr/local/bin/ 创建一个名为 mysql_exporter.service 的 systemd 服务文件，该文件在 /etc/systemd/system/ 目录下。 cat &amp;lt;&amp;lt;EOF &amp;gt; /etc/systemd/system/mysql_exporter.service [Unit] Description=mysql Exporter After=network.target [Service] Type=simple ExecStart=/usr/local/bin/mysqld_exporter --config.my-cnf=/etc/mysqlexporter/.my.cnf [Install] WantedBy=multi-user.target EOF 重新加载 systemd 的配置，启动 mysql_exporter.service 服务，并将其设置为开机启动。 systemctl daemon-reload systemctl start mysql_exporter.service systemctl enable mysql_exporter.service 验证 curl 127.0.0.1:9104/metrics 接入：&#xA;- job_name: &amp;#39;mysql&amp;#39; static_configs: - targets: [&amp;#39;mysql-exporter:9104&amp;#39;] Grafana 模版 ID ：17320</description>
    </item>
    <item>
      <title>Mongodb Exporter</title>
      <link>http://localhost:1313/docsgo/monitor/exporter/mongodb-exporter/</link>
      <pubDate>Mon, 25 Mar 2024 09:28:25 +0800</pubDate>
      <guid>http://localhost:1313/docsgo/monitor/exporter/mongodb-exporter/</guid>
      <description>🎉 mongodb exporter&#xA;下载：&#xA;wget https://github.com/percona/mongodb_exporter/releases/download/v0.11.2/mongodb_exporter-0.11.2.linux-amd64.tar.gz 减压后将 mongodb_exporter 二进制文件移动：&#xA;mv mongodb_exporter /usr/local/bin/ 在 MongoDB 中创建一个名为 prometheus 的用户&#xA;进入mongodb mongo mongo.skydns.local --ssl --sslPEMKeyFile /etc/ssl/mongo/client.pem --sslCAFile /etc/ssl/mongo/ca.crt --authenticationDatabase &amp;#39;$external&amp;#39; --authenticationMechanism MONGODB-X509 创建用户 use admin db.createUser({ user: &amp;#34;prometheus&amp;#34;, pwd: &amp;#34;prometheus&amp;#34;, roles: [ { role: &amp;#34;read&amp;#34;, db: &amp;#34;admin&amp;#34; }, { role: &amp;#34;readAnyDatabase&amp;#34;, db: &amp;#34;admin&amp;#34; }, { role: &amp;#34;clusterMonitor&amp;#34;, db: &amp;#34;admin&amp;#34; } ] }); 创建service文件&#xA;‼️ 修改证书路径 和 IP&#xA;cat &amp;lt;&amp;lt;EOF &amp;gt; /etc/systemd/system/mongodb_exporter.service [Unit] Description=mongodb_exporter After=network.</description>
    </item>
    <item>
      <title>Etcd Exporter</title>
      <link>http://localhost:1313/docsgo/monitor/exporter/etcd-exporter/</link>
      <pubDate>Mon, 25 Mar 2024 09:28:11 +0800</pubDate>
      <guid>http://localhost:1313/docsgo/monitor/exporter/etcd-exporter/</guid>
      <description>特定环境，每个节点 /etc/ssl/etcd/ssl 有etcd 证书&#xA;将以下配置写入：vmagent.yaml ‼️ 注意修改证书名为实际证书名，修改 etcd-ip&#xA;- job_name: &amp;#34;etcd&amp;#34; scheme: https tls_config: insecure_skip_verify: true cert_file: /etc/ssl/etcd/ssl/node-dev-master.pem key_file: /etc/ssl/etcd/ssl/node-dev-master-key.pem ca_file: /etc/ssl/etcd/ssl/ca.pem static_configs: - targets: [&amp;#39;etcd-ip1:2379&amp;#39;,&amp;#39;etcd-ip2:2379&amp;#39;,&amp;#39;etcd-ip3:2379&amp;#39;] </description>
    </item>
    <item>
      <title>Elasticsearch Exporter</title>
      <link>http://localhost:1313/docsgo/monitor/exporter/elasticsearch-exporter/</link>
      <pubDate>Mon, 25 Mar 2024 09:27:13 +0800</pubDate>
      <guid>http://localhost:1313/docsgo/monitor/exporter/elasticsearch-exporter/</guid>
      <description>监控 9114端口&#xA;下载减压：&#xA;wget https://github.com/prometheus-community/elasticsearch_exporter/releases/download/v1.5.0/elasticsearch_exporter-1.5.0.linux-amd64.tar.gz 2.减压后node_exporter移动&#xA;cp elasticsearch_exporter-1.5.0.linux-amd64/elasticsearch_exporter /usr/local/bin/ 3.service 文件&#xA;⚠️ &amp;ndash;es.uri 参数地址指定为 elasticsearch 节点IP&#xA;cat &amp;lt;&amp;lt;EOF | tee /etc/systemd/system/elasticsearch_exporter.service [Unit] Description=elasticsearch_exporter After=network.target [Service] Type=simple ExecStart=/usr/local/bin/elasticsearch_exporter --es.uri http://10.61.200.236:9200 --web.listen-address 0.0.0.0:9114 Restart=always [Install] WantedBy=multi-user.target EOF 启动服务 systemctl daemon-reload systemctl restart elasticsearch_exporter systemctl status elasticsearch_exporter systemctl enable elasticsearch_exporter 接入： - job_name: &amp;#39;elasticsearch_exporter&amp;#39; static_configs: - targets: [&amp;#39;10.61.200.236:9114&amp;#39;] Grafana 导入ID：14191</description>
    </item>
    <item>
      <title>Cassandra Exporter</title>
      <link>http://localhost:1313/docsgo/monitor/exporter/cassandra-exporter/</link>
      <pubDate>Mon, 25 Mar 2024 09:26:56 +0800</pubDate>
      <guid>http://localhost:1313/docsgo/monitor/exporter/cassandra-exporter/</guid>
      <description>在cassandra 节点 - data1&#xA;下载包 wget https://repo1.maven.org/maven2/io/prometheus/jmx/jmx_prometheus_javaagent/0.19.0/jmx_prometheus_javaagent-0.19.0.jar 放在data1:&#xA;mv jmx_prometheus_javaagent-0.19.0.jar /usr/share/cassandra/lib/ 2.1 配置修改1 /etc/cassandra/conf/cassandra-jmx.yaml&#xA;lowercaseOutputLabelNames: true lowercaseOutputName: true whitelistObjectNames: [&amp;#34;org.apache.cassandra.metrics:*&amp;#34;] # ColumnFamily is an alias for Table metrics blacklistObjectNames: [&amp;#34;org.apache.cassandra.metrics:type=ColumnFamily,*&amp;#34;] rules: # Generic gauges with 0-2 labels - pattern: org.apache.cassandra.metrics&amp;lt;type=(\S*)(?:, ((?!scope)\S*)=(\S*))?(?:, scope=(\S*))?, name=(\S*)&amp;gt;&amp;lt;&amp;gt;Value name: cassandra_$1_$5 type: GAUGE labels: &amp;#34;$1&amp;#34;: &amp;#34;$4&amp;#34; &amp;#34;$2&amp;#34;: &amp;#34;$3&amp;#34; # # Emulate Prometheus &amp;#39;Summary&amp;#39; metrics for the exported &amp;#39;Histogram&amp;#39;s. # TotalLatency is the sum of all latencies since server start # - pattern: org.</description>
    </item>
  </channel>
</rss>
